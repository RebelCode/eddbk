<?xml version="1.0" encoding="UTF-8"?>

<project name="eddbk" default="build">
    <!-- Verbosity flag - false for normal Phing output, true for command execution passthru output -->
    <property name="verbose" value="false"/>


    <!-- The base path, derived from the eddbk Phing project build file -->
    <property name="base_path" value="${phing.dir.eddbk}"/>
    <!-- The name of the root directory where build output files are placed -->
    <property name="build_dir" value="build"/>
    <!-- The name of the directory where built dist files are placed -->
    <property name="dist_dir" value="dist"/>
    <!-- The name of the directory where Node modules are installed  -->
    <property name="node_modules_dir" value="node_modules"/>
    <!-- The name of the directory where RebelCode modules can be found -->
    <property name="rcmodules_dir" value="modules"/>
    <!-- The name of the directory where language catalog and translation files can be found -->
    <property name="languages_dir" value="languages"/>
    <!-- The name of the directory where the package source code can be found -->
    <property name="source_dir" value="src"/>
    <!-- The name of the directory where the package template files can be found -->
    <property name="templates_dir" value="templates"/>
    <!-- The name of the directory where installed PHP dependencies can be found -->
    <property name="vendor_dir" value="vendor"/>

    <!-- The path to the root output build directory -->
    <property name="build_path" value="${base_path}/${build_dir}"/>
    <!-- The path to the dist build directory -->
    <property name="dist_path" value="${build_path}/${dist_dir}"/>
    <!-- The path to the Node modules directory -->
    <property name="node_modules_path" value="${base_path}/${node_modules_dir}"/>
    <!-- The path to the RebelCode modules directory -->
    <property name="rcmodules_path" value="${base_path}/${rcmodules_dir}"/>
    <!-- The path to the languages directory -->
    <property name="languages_path" value="${base_path}/${languages_dir}"/>
    <!-- The path to the source directory -->
    <property name="source_path" value="${base_path}/${source_dir}"/>
    <!-- The path to the templates directory -->
    <property name="templates_path" value="${base_path}/${templates_dir}"/>
    <!-- The path to the vendor directory -->
    <property name="vendor_path" value="${base_path}/${vendor_dir}"/>

    <!-- List of node modules -->
    <property name="node_modules_list" value=""/>

    <!-- Sets the `js_installed` property to true if the node modules directory exists -->
    <available property="js_installed" value="true" type="dir" file="${node_modules_path}"/>
    <!-- Sets the `has_js_deps` property to true if the package declares any JS dependencies -->
    <available property="has_js_deps" value="true" type="file" file="${base_path}/package.json"/>

    <!-- The buildable RebelCode modules -->
    <fileset dir="${rcmodules_path}" id="rcmodules_buildable">
        <include name="*/build.xml"/>
    </fileset>

    <!-- Build dist files and directories -->
    <fileset id="dist_files" dir="${base_path}">
        <!-- Exclude immediate build directory -->
        <exclude name="${build_dir}/**"/>
        <!-- Exclude IDE files -->
        <patternset>
            <exclude name=".idea/**"/>
            <exclude name="**/.idea/**"/>
        </patternset>
        <patternset>
            <exclude name="nbproject/**"/>
            <exclude name="**/nbproject/**"/>
        </patternset>
        <!-- Exclude Git files -->
        <patternset>
            <exclude name=".git/**"/>
            <exclude name="**/.git/**"/>
        </patternset>
        <patternset>
            <exclude name=".gitignore"/>
            <exclude name="**/.gitignore"/>
        </patternset>
        <patternset>
            <exclude name=".gitattributes"/>
            <exclude name="**/.gitattributes"/>
        </patternset>
        <!-- Exclude unbuilt JS dependencies -->
        <patternset>
            <exclude name="node_modules/**"/>
            <exclude name="**/node_modules/**"/>
        </patternset>
        <!-- Exclude tests -->
        <patternset>
            <exclude name="test/**"/>
            <exclude name="**/test/**"/>
        </patternset>
        <!-- Exclude dev tools config files -->
        <patternset>
            <exclude name=".phan/**"/>
            <exclude name="**/.phan/**"/>
        </patternset>
        <patternset>
            <exclude name="**/.php_cs"/>
        </patternset>
        <patternset>
            <exclude name=".codeclimate.yml"/>
            <exclude name="**/.codeclimate.yml"/>
        </patternset>
        <patternset>
            <exclude name=".travis.yml"/>
            <exclude name="**/.travis.yml"/>
        </patternset>
        <patternset>
            <exclude name="build.xml"/>
            <exclude name="**/build.xml"/>
        </patternset>
        <patternset>
            <exclude name="phpmd.xml"/>
            <exclude name="**/phpmd.xml"/>
        </patternset>
        <patternset>
            <exclude name="phpunit.xml"/>
            <exclude name="**/phpunit.xml"/>
        </patternset>
        <patternset>
            <exclude name="webpack.config.js"/>
            <exclude name="**/webpack.config.js"/>
        </patternset>
        <patternset>
            <exclude name="Vagrantfile"/>
            <exclude name="**/Vagrantfile"/>
        </patternset>
        <!-- Exclude package meta files -->
        <patternset>
            <exclude name="LICENSE"/>
            <exclude name="**/LICENSE"/>
        </patternset>
        <patternset>
            <exclude name="CHANGELOG.md"/>
            <exclude name="**/CHANGELOG.md"/>
        </patternset>
        <patternset>
            <exclude name="README.md"/>
            <exclude name="**/README.md"/>
        </patternset>
        <!-- Exclude package manager files -->
        <patternset>
            <exclude name="composer.json"/>
            <exclude name="**/composer.json"/>
        </patternset>
        <patternset>
            <exclude name="composer.lock"/>
            <exclude name="**/composer.lock"/>
        </patternset>
        <patternset>
            <exclude name="package.json"/>
            <exclude name="**/package.json"/>
        </patternset>
        <patternset>
            <exclude name="package-lock.json"/>
            <exclude name="**/package-lock.json"/>
        </patternset>
    </fileset>

    <!--
    Cleans the project of any previous builds.
    -->
    <target name="clean">
        <echo msg="Cleaning build files"/>
        <delete dir="${dist_path}" includeemptydirs="true"/>
    </target>

    <!--
    Prepares the project for building.
    -->
    <target name="prepare">
        <echo msg="Preparing for build"/>
        <mkdir dir="${dist_path}"/>
    </target>

    <!--
    Deploys the build files into the build directory.
    -->
    <target name="copy_dist">
        <echo msg="Copying distribution files into: ${dist_path}"/>
        <copy todir="${dist_path}" overwrite="true" verbose="${verbose}" haltonerror="true">
            <fileset refid="dist_files"/>
        </copy>
    </target>

    <!--
    Installs JS dependencies
    -->
    <target name="install_js">
        <echo msg="Installing JS dependencies"/>
        <exec command="npm install --no-bin-links" dir="${base_path}" checkreturn="true"/>
    </target>

    <!--
    Installs JS dependencies, only if the package has any.
    -->
    <target name="maybe_install_js" if="has_js_deps">
        <phingcall target="install_js"/>
    </target>

    <!--
    Builds a single JS module, by name.

    Param: node_module_name The name of the JS Node module to build.
    -->
    <target name="build_js_module">
        <echo msg="Building JS module '${node_module_name}'"/>
        <exec command="npm run build -- --output-path='${dist_path}/${node_module_name}'"
              dir="${node_modules_path}/${node_module_name}" passthru="${verbose}"/>
    </target>

    <!--
    Builds all JS modules for this package.

    Performs cleaning, preparation and installation of JS dependencies (if needed).
    -->
    <target name="build_js_modules" depends="clean, prepare, maybe_install_js">
        <echo msg="Building JS modules in ${base_path}"/>
        <foreach list="${node_modules_list}" param="node_module_name" target="build_js_module"/>
    </target>

    <!--
    Installs PHP dependencies using Composer.
    -->
    <target name="install_php">
        <exec command="composer install" passthru="${verbose}" />
        <echo msg="Installing PHP dependencies in ${base_path}"/>
    </target>

    <!--
    Builds the RebelCode modules for this package.

    Performs cleaning, preparation and installs PHP dependencies.
    -->
    <target name="build_rc_modules" depends="clean,prepare,install_php">
        <echo msg="Building RebelCode modules in ${base_path}"/>
        <phing inheritAll="false">
            <fileset refid="rcmodules_buildable"/>
        </phing>
    </target>

    <!--
    Main build target.

    Builds RebelCode and JS modules and deploys the files to the build directory.
    -->
    <target name="build" depends="build_rc_modules, copy_dist">
    </target>
</project>
